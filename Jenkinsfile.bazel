pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'bazel-python-demo'
    }
    
    stages {
        stage('Install Bazelisk') {
            steps {
                echo 'Installing Bazelisk (Bazel launcher)...'
                sh '''
                    # Check if Bazel is already installed
                    if ! command -v bazel &> /dev/null; then
                        echo "Bazel not found. Installing Bazelisk..."
                        
                        # Download Bazelisk
                        curl -L -o bazelisk "https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64"
                        chmod +x bazelisk
                        
                        # Create local bin directory if it doesn't exist
                        mkdir -p ~/bin
                        mv bazelisk ~/bin/bazel
                        
                        # Add to PATH for this session
                        export PATH="$HOME/bin:$PATH"
                        
                        echo "Bazelisk installation completed!"
                        echo "PATH: $PATH"
                        ~/bin/bazel version
                    else
                        echo "Bazel is already installed."
                        bazel version
                    fi
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out Bazel Python code...'
                checkout scm
            }
        }
        
        stage('Bazel Info') {
            steps {
                echo 'Checking Bazel environment...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel version
                    bazel info
                '''
            }
        }
        
        stage('Clean Build') {
            steps {
                echo 'Cleaning previous build artifacts...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel clean
                '''
            }
        }
        
        stage('Build All Targets') {
            steps {
                echo 'Building all targets with Bazel...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel build //...
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with Bazel...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel test //... --test_output=all
                '''
            }
        }
        
        stage('Run Application') {
            steps {
                echo 'Running the Python application...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel run //:hello
                '''
            }
        }
        
        stage('Query Targets') {
            steps {
                echo 'Showing all available targets...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel query //...
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Bazel pipeline completed!'
            sh '''
                export PATH="$HOME/bin:$PATH"
                bazel shutdown || true
            '''
        }
        success {
            echo 'Bazel build succeeded! üéâ'
            echo 'Python application ran successfully with Bazel!'
        }
        failure {
            echo 'Bazel build failed! ‚ùå'
            echo 'Check the logs above for details.'
        }
        cleanup {
            echo 'Cleaning up workspace...'
            // Clean up any remaining Bazel processes
            sh '''
                export PATH="$HOME/bin:$PATH"
                bazel clean --expunge || true
            '''
        }
    }
}