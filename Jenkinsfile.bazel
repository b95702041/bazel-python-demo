pipeline {
    agent any
    
    environment {
        PROJECT_NAME = 'bazel-python-demo'
    }
    
    stages {
        stage('Setup Build Environment') {
            steps {
                echo 'Installing build tools and Bazelisk...'
                sh '''
                    # Install build essentials as root (Jenkins container allows this)
                    apt-get update
                    apt-get install -y build-essential curl
                    
                    # Install Bazelisk if not already installed
                    if ! command -v bazel &> /dev/null; then
                        echo "Installing Bazelisk..."
                        curl -L -o bazelisk "https://github.com/bazelbuild/bazelisk/releases/latest/download/bazelisk-linux-amd64"
                        chmod +x bazelisk
                        mkdir -p ~/bin
                        mv bazelisk ~/bin/bazel
                        export PATH="$HOME/bin:$PATH"
                        echo "Bazelisk installation completed!"
                        ~/bin/bazel version
                    else
                        echo "Bazel is already installed."
                        bazel version
                    fi
                    
                    # Verify gcc is available
                    gcc --version
                '''
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'Checking out Bazel Python code...'
                checkout scm
            }
        }
        
        stage('Build Hello Target') {
            steps {
                echo 'Building the hello target...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel build //:hello
                '''
            }
        }
        
        stage('Run Application') {
            steps {
                echo 'Running the Python application...'
                sh '''
                    export PATH="$HOME/bin:$PATH"
                    bazel run //:hello
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Bazel pipeline completed!'
            sh '''
                export PATH="$HOME/bin:$PATH"
                bazel shutdown || true
            '''
        }
        success {
            echo 'Bazel build succeeded! üéâ'
            echo 'Python application ran successfully with Bazel!'
        }
        failure {
            echo 'Bazel build failed! ‚ùå'
            echo 'Check the logs above for details.'
        }
        cleanup {
            echo 'Cleaning up workspace...'
            sh '''
                export PATH="$HOME/bin:$PATH"
                bazel clean --expunge || true
            '''
        }
    }
}